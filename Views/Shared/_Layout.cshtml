@using Microsoft.AspNetCore.Identity
@using BookLibraryStore.Utility

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BookLibraryStore</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/BookLibraryStore.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.12.1/font/bootstrap-icons.min.css">
</head>
<body>
    @await Component.InvokeAsync("AnnouncementBanner")
    <header class="header">
        <div class="header__container">
            <img src="~/assets/logo.png" alt="Bookstore Logo" class="header__logo">

            <div class="header__nav">
                <ul class="header__nav-list" id="navMenu">
                    <li class="header__nav-item">
                        <a class="header__nav-link" asp-area="Customer" asp-controller="Home" asp-action="Index">Home</a>
                    </li>
                    <li class="header__nav-item">
                        <a class="header__nav-link" asp-area="Customer" asp-controller="Home" asp-action="Catalog">Products</a>
                    </li>

                    <li class="header__nav-item">
                        <a class="header__nav-link" asp-area="Customer" asp-controller="Order" asp-action="Index">Order</a>
                    </li>

                    @if (User.IsInRole(SD.Role_Admin))
                    {
                        <li class="header__nav-item">
                            <a class="header__nav-link" asp-area="Admin" asp-controller="Book" asp-action="Index">Books</a>
                        </li>

                        <li class="header__nav-item">
                            <a class="header__nav-link" asp-area="Admin" asp-controller="Announcements" asp-action="Index">Announcement</a>
                        </li>
                    }

                    @if (User.IsInRole(SD.Role_Admin) || User.IsInRole(SD.Role_Staff))
                    {
                        <li class="header__nav-item">
                            <a class="header__nav-link" asp-area="Customer" asp-controller="Order" asp-action="PickupPage">OrderPickUp</a>
                        </li>
                    }
                </ul>

                <div class="header__hamburger" id="hamburger">
                    <div class="header__hamburger-line"></div>
                    <div class="header__hamburger-line"></div>
                    <div class="header__hamburger-line"></div>
                </div>
            </div>

            <div class="header__icons">
                @if (User.IsInRole(SD.Role_Customer))
                {
                    @*BookMark*@
                    <div class="header__icon">
                        <a asp-area="Customer" asp-controller="Bookmark" asp-action="Index" class="text-white">
                            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                            </svg>
                        </a>
                    </div>
                    @*Cart*@
                    <div class="header__icon">
                        <a asp-area="Customer" asp-controller="Cart" asp-action="Index" class="text-white">
                            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <circle cx="9" cy="21" r="1"></circle>
                                <circle cx="20" cy="21" r="1"></circle>
                                <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
                            </svg>
                        </a>
                    </div>
                }

                @if (SignInManager.IsSignedIn(User))
                {
                    <div class="header__icon">
                        <a asp-area="Customer" asp-controller="Home" asp-action="UserProfile" class="text-white">
                            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                <circle cx="12" cy="7" r="4"></circle>
                            </svg>
                        </a>
                    </div>
                    <div class="header__icon">
                        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                            <button id="logout" type="submit" class="nav-link btn btn-link text-dark border-0 text-white w-25 h-25"><i class="bi bi-box-arrow-left"></i></button>
                        </form>
                    </div>
                }
                else
                {
                    <div class="header__icon">
                        <a asp-area="Identity" asp-page="/Account/Login" class="btn text-white">
                            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                <circle cx="12" cy="7" r="4"></circle>
                            </svg>
                        </a>
                    </div>
                }

                @if (User.IsInRole(SD.Role_Customer))
                {
                    <div class="header__icon position-relative">
                        <button class="btn text-white" id="notificationBell" type="button">
                            <i class="bi bi-bell-fill"></i>
                            <span id="notificationCount"
                                  class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                                  style="display:none;">0</span>
                        </button>
                    </div>
                }

            </div>
        </div>
    </header>

    <div class="container">
        <main role="main" class="pb-3">
            <partial name="_Notification" />
            @RenderBody()
        </main>
    </div>

    <div class="modal fade" id="notificationModal" tabindex="-1" aria-labelledby="notificationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="notificationModalLabel">Recent Notifications</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="notificationList">
                    <!-- Populated by JS -->
                </div>
            </div>
        </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    @await RenderSectionAsync("Scripts", required: false)

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/orderBroadcastHub")
            .build();

        const notificationList = document.getElementById("notificationList");
        const notificationCount = document.getElementById("notificationCount");
        const notificationBell = document.getElementById("notificationBell");

        let notifications = [];

        connection.on("ReceiveOrderBroadcast", function (message) {
            showOrderToast(message);
            addNotificationToModal(message);
        });

        connection.start().catch(err => console.error(err.toString()));

        async function fetchInitialNotifications() {
            try {
                const res = await fetch("/Customer/api/Notifications/GetAll");
                const data = await res.json();
                console.log(data);
                notifications = data || [];

                notificationList.innerHTML = '';
                notifications.forEach(n => {
                    addNotificationToModal(n.message, n.broadcastTime, false);
                });

                updateNotificationCount();
            } catch (err) {
                console.error("Failed to load notifications", err);
            }
        }

        function showOrderToast(message) {
            console.log(`Real Time Msg: ${message}`);
            const toast = document.createElement("div");
            toast.className = "order-toast bg-success text-white p-3 rounded shadow";
            toast.style.position = "fixed";
            toast.style.bottom = "20px";
            toast.style.right = "20px";
            toast.style.zIndex = "9999";
            toast.innerText = message;

            document.body.appendChild(toast);

            setTimeout(() => toast.remove(), 5000);
        }

        function addNotificationToModal(message, time = null, pushToArray = true) {
            const wrapper = document.createElement("div");
            wrapper.className = "border-bottom py-2 small";

            const timestamp = time ? new Date(time).toLocaleString() : new Date().toLocaleString();
            wrapper.innerHTML = `<strong>${message}</strong><br><small class="text-muted">${timestamp}</small>`;

            notificationList.prepend(wrapper);
            if (pushToArray) {
                notifications.push({ message, broadcastTime: time });
            }
            updateNotificationCount();
        }

        function updateNotificationCount() {
            const count = notifications.length;
            if (count > 0) {
                notificationCount.innerText = count;
                notificationCount.style.display = "inline-block";
            } else {
                notificationCount.style.display = "none";
            }
        }

        notificationBell.addEventListener("click", () => {
            const modal = new bootstrap.Modal(document.getElementById("notificationModal"));
            modal.show();
        });


        fetchInitialNotifications();
    </script>
</body>
</html>
